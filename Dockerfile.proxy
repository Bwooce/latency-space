# Simple and robust Dockerfile for building the proxy service
FROM golang:1.21.6-alpine3.19 AS builder

# Install dependencies
RUN apk add --no-cache git gcc musl-dev

# Start with a completely clean environment
WORKDIR /app

# Copy only the source code we need
COPY proxy/src/ /app/src/
COPY shared/ /app/shared/

# Create a new Go module
WORKDIR /app/build
RUN mkdir -p celestial && \
    # Create a standalone celestial package
    echo 'package celestial' > celestial/celestial.go && \
    echo 'const (' >> celestial/celestial.go && \
    echo '  SPEED_OF_LIGHT = 299792.458' >> celestial/celestial.go && \
    echo '  AU = 149597870.7' >> celestial/celestial.go && \
    echo '  EARTH_RADIUS = 6378.137' >> celestial/celestial.go && \
    echo '  SUN_RADIUS = 695700.0' >> celestial/celestial.go && \
    echo '  SECONDS_PER_DAY = 86400.0' >> celestial/celestial.go && \
    echo '  DAYS_PER_CENTURY = 36525.0' >> celestial/celestial.go && \
    echo '  J2000_EPOCH = 2451545.0' >> celestial/celestial.go && \
    echo ')' >> celestial/celestial.go && \
    echo 'type CelestialObject struct { Name, Type, ParentName string; Radius float64 }' >> celestial/celestial.go && \
    echo 'type Vector3 struct { X, Y, Z float64 }' >> celestial/celestial.go && \
    echo 'func GetPlanets() []CelestialObject { return []CelestialObject{} }' >> celestial/celestial.go && \
    echo 'func GetMoons(name string) []CelestialObject { return []CelestialObject{} }' >> celestial/celestial.go && \
    echo 'func NormalizeDegrees(angle float64) float64 { return angle }' >> celestial/celestial.go

# Create a simple main package with everything needed
RUN cp /app/src/*.go . && \
    # Create go.mod file from scratch
    go mod init proxy && \
    # Fix imports to use our local celestial package
    sed -i 's|"github.com/latency-space/shared/celestial"|"proxy/celestial"|g' *.go && \
    # Add explicit dependencies with versions
    go get github.com/prometheus/client_golang@v1.17.0 && \
    go get github.com/gorilla/websocket@v1.5.0 && \
    go get golang.org/x/crypto@v0.14.0 && \
    go get golang.org/x/time@v0.3.0 && \
    # Download dependencies
    go mod tidy

# Build the final binary
ENV CGO_ENABLED=0 \
    GOOS=linux
RUN go build -o latency-proxy

# Create minimal runtime image
FROM alpine:3.19.1

# Install runtime dependencies
RUN apk add --no-cache \
    iproute2 \
    iptables \
    openssl && \
    mkdir -p /etc/latency-space /app/templates

# Copy binary and templates
COPY --from=builder /app/build/latency-proxy /usr/local/bin/latency-proxy
COPY proxy/src/templates/ /app/templates/
RUN chmod +x /usr/local/bin/latency-proxy

# Expose standard ports
EXPOSE 80 443 1080 9090

# Run the proxy
CMD ["/usr/local/bin/latency-proxy"]
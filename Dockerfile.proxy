# Use a specific golang Alpine version
FROM golang:1.21.6-alpine3.19 AS builder

# Install build dependencies
RUN apk add --no-cache gcc musl-dev git

# Create a clean build environment
WORKDIR /app

# Create a clean environment without any previous files
COPY proxy/src/*.go /app/
COPY proxy/src/templates /app/templates

# Copy shared celestial package and convert it to a local package
WORKDIR /app/celestial
COPY shared/celestial/celestial.go /app/celestial/celestial.go

# Set up a standalone build without network dependency
WORKDIR /app
RUN sed -i 's|"github.com/latency-space/shared/celestial"|"github.com/prometheus/client_golang/prometheus"|g' models.go && \
    sed -i 's|celestial\.|\"|g' models.go && \
    echo "// SPEED_OF_LIGHT and other constants are now defined directly here" >> models.go

# Build the binary with exact dependency versions
RUN go mod init github.com/latency-space/proxy-standalone && \
    go mod edit -require github.com/prometheus/client_golang@v1.15.0 && \
    go mod edit -require github.com/gorilla/websocket@v1.5.0 && \
    go mod edit -require golang.org/x/crypto@v0.14.0 && \
    go mod edit -require golang.org/x/time@v0.3.0 && \
    go mod tidy && \
    go build -o /app/latency-proxy

# Create a minimal runtime image
FROM alpine:3.19.1

# Install required runtime dependencies
RUN apk add --no-cache iproute2 iptables openssl && \
    mkdir -p /etc/latency-space

# Copy the binary and templates
COPY --from=builder /app/latency-proxy /usr/local/bin/latency-proxy
COPY --from=builder /app/templates /app/templates
RUN chmod +x /usr/local/bin/latency-proxy

# Expose ports
EXPOSE 80 443 1080 9090

# Run the proxy
CMD ["/usr/local/bin/latency-proxy"]
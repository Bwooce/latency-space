# Define rate limiting zones
limit_req_zone $binary_remote_addr zone=ip:10m rate=5r/m;
limit_conn_zone $binary_remote_addr zone=addr:10m;

# Define resolver for Docker DNS
resolver 127.0.0.11 valid=30s;

# Server for base domain latency.space
server {
    listen 80;
    server_name latency.space www.latency.space;
    
    # Handle Let's Encrypt validation challenges
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }
    
    # Allow direct access to diagnostic pages
    location ~ ^/(diagnostic\.html|status\.html)$ {
        root /var/www/html;
        try_files $uri =404;
    }
    
    # Less strict rate limiting for main site
    limit_req zone=ip burst=20 nodelay;
    limit_conn addr 10;
    
    # Serve the main site content
    root /opt/latency-space/static;
    index index.html;
    
    # Try to serve static files, fallback to index.html for SPA
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # Return 444 (no response) for suspicious requests
    location ~ \.(php|aspx|asp|cgi|jsp)$ {
        return 444;
    }
}

# Server for all other .latency.space subdomains
server {
    listen 80;
    server_name ~^[^.]+\.latency\.space$ ~^[^.]+\.[^.]+\.latency\.space$ ~^[^.]+\.[^.]+\.[^.]+\.latency\.space$;
    
    # Handle Let's Encrypt validation challenges
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }
    
    # Global rate limiting - very strict
    limit_req zone=ip burst=10 nodelay;
    limit_conn addr 5;
    
    # For all subdomains, serve over HTTP directly
    location / {
        # Only allow GET requests to prevent abuse
        limit_except GET {
            deny all;
        }
        
        # Docker service resolution - using direct IP instead of DNS to avoid resolution issues
        proxy_pass http://172.18.0.4:80;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Destination $host;
        proxy_cache_bypass $http_upgrade;
        
        # Set timeouts to prevent hanging connections
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Return 444 (no response) for suspicious requests
    location ~ \.(php|aspx|asp|cgi|jsp)$ {
        return 444;
    }
}

# Server for status dashboard
server {
    listen 80;
    server_name status.latency.space;
    
    # Global rate limiting - very strict
    limit_req zone=ip burst=10 nodelay;
    limit_conn addr 5;
    
    location / {
        # Docker service resolution - using direct IP instead of DNS to avoid resolution issues
        proxy_pass http://172.18.0.5:80;
        
        # Standard proxy headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Increase timeouts for dashboard operations
        proxy_connect_timeout 30s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}
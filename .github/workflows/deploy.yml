name: Deploy to VPS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: SSH into VPS and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            # Verify DNS resolution is working
            echo "Testing DNS resolution..."
            if ! ping -c 1 github.com &> /dev/null; then
              echo "DNS resolution issue - trying to fix..."
              
              # Check if systemd-resolved is in use
              if [ -L /etc/resolv.conf ]; then
                echo "System is using systemd-resolved"
                
                # Configure systemd-resolved
                cat > /etc/systemd/resolved.conf << 'EOF'
            [Resolve]
            DNS=8.8.8.8 8.8.4.4 1.1.1.1
            FallbackDNS=9.9.9.9 149.112.112.112
            DNSStubListener=yes
            Cache=yes
            EOF
                
                # Restart systemd-resolved
                systemctl restart systemd-resolved
              else
                # Direct modification
                echo "nameserver 8.8.8.8" > /etc/resolv.conf
                echo "nameserver 8.8.4.4" >> /etc/resolv.conf
                echo "nameserver 1.1.1.1" >> /etc/resolv.conf
              fi
              
              # Check if DNS is now working
              if ! ping -c 1 github.com &> /dev/null; then
                echo "First approach failed - trying to replace symlink..."
                
                # Try breaking the symlink as a last resort
                if [ -L /etc/resolv.conf ]; then
                  rm /etc/resolv.conf
                  cat > /etc/resolv.conf << 'EOF'
            nameserver 8.8.8.8
            nameserver 8.8.4.4
            nameserver 1.1.1.1
            options timeout:2 attempts:5
            EOF
                fi
                
                # Final check
                if ! ping -c 1 github.com &> /dev/null; then
                  echo "Failed to resolve github.com - deployment aborted"
                  exit 1
                fi
              fi
            fi
            
            # Configure Docker DNS
            echo "Configuring Docker DNS..."
            mkdir -p /etc/docker
            cat > /etc/docker/daemon.json << 'EOF'
            {
              "dns": ["8.8.8.8", "8.8.4.4", "1.1.1.1"]
            }
            EOF
            
            # Restart Docker to apply DNS settings
            systemctl restart docker
            
            # Verify internet connectivity
            echo "Checking internet connectivity..."
            if ! curl -s --connect-timeout 5 https://api.github.com &> /dev/null; then
              echo "No internet connectivity - deployment aborted"
              exit 1
            fi
            
            # Proceed with deployment
            echo "Starting deployment..."
            cd /opt/latency-space || { echo "Failed to change directory"; exit 1; }
            
            # Pull latest code
            echo "Pulling latest code..."
            
            # Fix any file permission issues
            echo "Fixing file permissions..."
            chown -R $USER:$USER . || echo "Warning: Failed to update ownership, continuing anyway"
            find . -type d -exec chmod 755 {} \; || echo "Warning: Failed to update directory permissions, continuing anyway"
            find . -type f -exec chmod 644 {} \; || echo "Warning: Failed to update file permissions, continuing anyway"
            
            git fetch --all || { echo "Git fetch failed"; exit 1; }
            git reset --hard origin/main || { echo "Git reset failed"; exit 1; }
            
            # Backup the docker-compose.yml file
            echo "Backing up docker-compose.yml..."
            if [ -f docker-compose.yml ]; then
              cp docker-compose.yml docker-compose.yml.backup || echo "Warning: Failed to backup docker-compose.yml"
            fi
            
            # Ensure docker compose is installed
            echo "Setting up docker compose..."
            if ! command -v docker compose &> /dev/null; then
              echo "docker compose not found, trying to install it..."
              apt-get update
              apt-get install -y docker-compose-plugin || { echo "Failed to install docker-compose-plugin"; }
            fi
            
            # Rebuild and restart services
            echo "Rebuilding and restarting services..."
            docker compose down || { echo "Warning: docker compose down failed, continuing..."; }
            docker compose pull || { echo "Warning: docker compose pull failed, continuing..."; }
            docker compose build --no-cache || { echo "Warning: docker compose build failed, continuing..."; }
            docker compose up -d || { 
              echo "Error: docker compose up failed, trying fallback to docker-compose..."; 
              # Try with legacy docker-compose if docker compose fails
              if command -v docker-compose &> /dev/null; then
                docker-compose down
                docker-compose pull
                docker-compose build --no-cache
                docker-compose up -d || { echo "Error: docker-compose up also failed"; exit 1; }
              else
                echo "Neither docker compose nor docker-compose is working"; 
                exit 1; 
              fi
            }
            
            # Reload nginx to apply any configuration changes
            if systemctl is-active --quiet nginx; then
              systemctl reload nginx || echo "Warning: Failed to reload nginx"
            else
              echo "Nginx not running, trying to start it..."
              systemctl start nginx || echo "Warning: Failed to start nginx"
            fi
            
            # Verify services are running
            echo "Verifying services..."
            sleep 10 # Wait for services to start
            if ! docker compose ps | grep -q "Up"; then
              echo "Services may not be running, checking alternative command..."
              if command -v docker-compose &> /dev/null && docker-compose ps | grep -q "Up"; then
                echo "Services are up (verified using legacy docker-compose)"
              else
                echo "Services failed to start properly"
                docker compose logs || docker-compose logs
                exit 1
              fi
            fi
            
            echo "Deployment completed successfully!"
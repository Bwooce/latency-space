# .github/workflows/main.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Daily build to update orbital calculations

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install dependencies
        working-directory: ./proxy/src
        run: |
          go mod download

      - name: Run tests
        working-directory: ./proxy/src
        run: go test -v ./... -race -coverprofile=coverage.txt

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./proxy/src/coverage.txt

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ./proxy/src

      - name: Lint Docker files
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./proxy/Dockerfile

  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: string
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ env.IMAGE_NAME }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ steps.string.outputs.lowercase }}
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}

      - name: Build and push proxy
        uses: docker/build-push-action@v4
        with:
          context: ./proxy
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build other services
      - name: Build and push monitoring
        uses: docker/build-push-action@v4
        with:
          context: ./monitoring/grafana
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ steps.string.outputs.lowercase }}-grafana:${{ github.sha }}

      - name: Build and push status
        uses: docker/build-push-action@v4
        with:
          context: ./status
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ steps.string.outputs.lowercase }}-status:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    concurrency: production
    steps:
      - uses: actions/checkout@v3

      - name: Configure SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Update config
        env:
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          SERVER_IP: ${{ secrets.DEPLOY_HOST }}
        run: |
          cd tools
          ln -fs ../proxy/src/config.go .
          ln -fs ../proxy/src/models.go .
          go run . -token $CF_API_TOKEN -ip $SERVER_IP

      - name: Deploy
        run: |
          ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} '
            cd /opt/latency-space && \
            docker compose -f /opt/latency-space/docker-compose.yml pull && \
            docker compose -f /opt/latency-space/docker-compose.yml up -d && \
            docker system prune -f
          '

      - name: Verify Deployment
        run: |
          for i in {1..12}; do
            if curl -s https://mars.latency.space/health; then
              exit 0
            fi
            sleep 10
          done
          exit 1

